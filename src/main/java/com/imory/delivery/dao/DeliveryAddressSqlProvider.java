package com.imory.delivery.dao;

import com.imory.delivery.dto.DeliveryAddress;
import com.imory.delivery.dto.DeliveryAddressExample;
import com.imory.delivery.dto.DeliveryAddressExample.Criteria;
import com.imory.delivery.dto.DeliveryAddressExample.Criterion;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class DeliveryAddressSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String countByExample(DeliveryAddressExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("delivery_address");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String deleteByExample(DeliveryAddressExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("delivery_address");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String insertSelective(DeliveryAddress record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("delivery_address");
        
        if (record.getUser_id() != null) {
            sql.VALUES("user_id", "#{user_id,jdbcType=INTEGER}");
        }
        
        if (record.getRealname() != null) {
            sql.VALUES("realname", "#{realname,jdbcType=VARCHAR}");
        }
        
        if (record.getTelphone() != null) {
            sql.VALUES("telphone", "#{telphone,jdbcType=VARCHAR}");
        }
        
        if (record.getTelphone2() != null) {
            sql.VALUES("telphone2", "#{telphone2,jdbcType=VARCHAR}");
        }
        
        if (record.getCountry() != null) {
            sql.VALUES("country", "#{country,jdbcType=VARCHAR}");
        }
        
        if (record.getProvince() != null) {
            sql.VALUES("province", "#{province,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.VALUES("city", "#{city,jdbcType=VARCHAR}");
        }
        
        if (record.getArea() != null) {
            sql.VALUES("area", "#{area,jdbcType=VARCHAR}");
        }
        
        if (record.getStreet() != null) {
            sql.VALUES("street", "#{street,jdbcType=VARCHAR}");
        }
        
        if (record.getZip() != null) {
            sql.VALUES("zip", "#{zip,jdbcType=VARCHAR}");
        }
        
        if (record.getIs_default_address() != null) {
            sql.VALUES("is_default_address", "#{is_default_address,jdbcType=BIT}");
        }
        
        if (record.getCreated_time() != null) {
            sql.VALUES("created_time", "#{created_time,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String selectByExample(DeliveryAddressExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("address_id");
        } else {
            sql.SELECT("address_id");
        }
        sql.SELECT("user_id");
        sql.SELECT("realname");
        sql.SELECT("telphone");
        sql.SELECT("telphone2");
        sql.SELECT("country");
        sql.SELECT("province");
        sql.SELECT("city");
        sql.SELECT("area");
        sql.SELECT("street");
        sql.SELECT("zip");
        sql.SELECT("is_default_address");
        sql.SELECT("created_time");
        sql.FROM("delivery_address");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        DeliveryAddress record = (DeliveryAddress) parameter.get("record");
        DeliveryAddressExample example = (DeliveryAddressExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("delivery_address");

        if (record.getAddress_id() != null) {
            sql.SET("address_id = #{record.address_id,jdbcType=INTEGER}");
        }

        if (record.getUser_id() != null) {
            sql.SET("user_id = #{record.user_id,jdbcType=INTEGER}");
        }

        if (record.getRealname() != null) {
            sql.SET("realname = #{record.realname,jdbcType=VARCHAR}");
        }

        if (record.getTelphone() != null) {
            sql.SET("telphone = #{record.telphone,jdbcType=VARCHAR}");
        }

        if (record.getTelphone2() != null) {
            sql.SET("telphone2 = #{record.telphone2,jdbcType=VARCHAR}");
        }

        if (record.getCountry() != null) {
            sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        }

        if (record.getProvince() != null) {
            sql.SET("province = #{record.province,jdbcType=VARCHAR}");
        }

        if (record.getCity() != null) {
            sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        }

        if (record.getArea() != null) {
            sql.SET("area = #{record.area,jdbcType=VARCHAR}");
        }

        if (record.getStreet() != null) {
            sql.SET("street = #{record.street,jdbcType=VARCHAR}");
        }

        if (record.getZip() != null) {
            sql.SET("zip = #{record.zip,jdbcType=VARCHAR}");
        }

        if (record.getIs_default_address() != null) {
            sql.SET("is_default_address = #{record.is_default_address,jdbcType=BIT}");
        }

        if (record.getCreated_time() != null) {
            sql.SET("created_time = #{record.created_time,jdbcType=TIMESTAMP}");
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("delivery_address");
        
        sql.SET("address_id = #{record.address_id,jdbcType=INTEGER}");
        sql.SET("user_id = #{record.user_id,jdbcType=INTEGER}");
        sql.SET("realname = #{record.realname,jdbcType=VARCHAR}");
        sql.SET("telphone = #{record.telphone,jdbcType=VARCHAR}");
        sql.SET("telphone2 = #{record.telphone2,jdbcType=VARCHAR}");
        sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        sql.SET("province = #{record.province,jdbcType=VARCHAR}");
        sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        sql.SET("area = #{record.area,jdbcType=VARCHAR}");
        sql.SET("street = #{record.street,jdbcType=VARCHAR}");
        sql.SET("zip = #{record.zip,jdbcType=VARCHAR}");
        sql.SET("is_default_address = #{record.is_default_address,jdbcType=BIT}");
        sql.SET("created_time = #{record.created_time,jdbcType=TIMESTAMP}");
        
        DeliveryAddressExample example = (DeliveryAddressExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    public String updateByPrimaryKeySelective(DeliveryAddress record) {
        SQL sql = new SQL();
        sql.UPDATE("delivery_address");
        
        if (record.getUser_id() != null) {
            sql.SET("user_id = #{user_id,jdbcType=INTEGER}");
        }
        
        if (record.getRealname() != null) {
            sql.SET("realname = #{realname,jdbcType=VARCHAR}");
        }
        
        if (record.getTelphone() != null) {
            sql.SET("telphone = #{telphone,jdbcType=VARCHAR}");
        }
        
        if (record.getTelphone2() != null) {
            sql.SET("telphone2 = #{telphone2,jdbcType=VARCHAR}");
        }
        
        if (record.getCountry() != null) {
            sql.SET("country = #{country,jdbcType=VARCHAR}");
        }
        
        if (record.getProvince() != null) {
            sql.SET("province = #{province,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.SET("city = #{city,jdbcType=VARCHAR}");
        }
        
        if (record.getArea() != null) {
            sql.SET("area = #{area,jdbcType=VARCHAR}");
        }
        
        if (record.getStreet() != null) {
            sql.SET("street = #{street,jdbcType=VARCHAR}");
        }
        
        if (record.getZip() != null) {
            sql.SET("zip = #{zip,jdbcType=VARCHAR}");
        }
        
        if (record.getIs_default_address() != null) {
            sql.SET("is_default_address = #{is_default_address,jdbcType=BIT}");
        }
        
        if (record.getCreated_time() != null) {
            sql.SET("created_time = #{created_time,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("address_id = #{address_id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table delivery_address
     *
     * @mbggenerated Fri Oct 06 15:18:37 CST 2017
     */
    protected void applyWhere(SQL sql, DeliveryAddressExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}