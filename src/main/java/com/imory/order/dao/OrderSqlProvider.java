package com.imory.order.dao;

import com.imory.order.dto.Order;
import com.imory.order.dto.OrderExample.Criteria;
import com.imory.order.dto.OrderExample.Criterion;
import com.imory.order.dto.OrderExample;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class OrderSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String countByExample(OrderExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("order");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String deleteByExample(OrderExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("order");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String insertSelective(Order record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("order");
        
        if (record.getOrder_no() != null) {
            sql.VALUES("order_no", "#{order_no,jdbcType=VARCHAR}");
        }
        
        if (record.getShop_id() != null) {
            sql.VALUES("shop_id", "#{shop_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_status() != null) {
            sql.VALUES("order_status", "#{order_status,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_count() != null) {
            sql.VALUES("product_count", "#{product_count,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_amount_total() != null) {
            sql.VALUES("product_amount_total", "#{product_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_amount_total() != null) {
            sql.VALUES("order_amount_total", "#{order_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getLogistics_fee() != null) {
            sql.VALUES("logistics_fee", "#{logistics_fee,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_coupon_total() != null) {
            sql.VALUES("order_coupon_total", "#{order_coupon_total,jdbcType=DECIMAL}");
        }
        
        if (record.getIs_unpacking_inspection() != null) {
            sql.VALUES("is_unpacking_inspection", "#{is_unpacking_inspection,jdbcType=INTEGER}");
        }
        
        if (record.getIsinvoiceFlag() != null) {
            sql.VALUES("isinvoiceFlag", "#{isinvoiceFlag,jdbcType=INTEGER}");
        }
        
        if (record.getInvoice_id() != null) {
            sql.VALUES("invoice_id", "#{invoice_id,jdbcType=INTEGER}");
        }
        
        if (record.getAddress_id() != null) {
            sql.VALUES("address_id", "#{address_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrderlogistics_id() != null) {
            sql.VALUES("orderlogistics_id", "#{orderlogistics_id,jdbcType=INTEGER}");
        }
        
        if (record.getPay_channel() != null) {
            sql.VALUES("pay_channel", "#{pay_channel,jdbcType=VARCHAR}");
        }
        
        if (record.getOut_trade_no() != null) {
            sql.VALUES("out_trade_no", "#{out_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getEscrow_trade_no() != null) {
            sql.VALUES("escrow_trade_no", "#{escrow_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderTime() != null) {
            sql.VALUES("orderTime", "#{orderTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPayTime() != null) {
            sql.VALUES("payTime", "#{payTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLogisticsTime() != null) {
            sql.VALUES("logisticsTime", "#{logisticsTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUser_id() != null) {
            sql.VALUES("user_id", "#{user_id,jdbcType=INTEGER}");
        }
        
        if (record.getUser_remark() != null) {
            sql.VALUES("user_remark", "#{user_remark,jdbcType=VARCHAR}");
        }
        
        if (record.getOrder_settlement_status() != null) {
            sql.VALUES("order_settlement_status", "#{order_settlement_status,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_settlement_time() != null) {
            sql.VALUES("order_settlement_time", "#{order_settlement_time,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("createTime", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String selectByExample(OrderExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("order_id");
        } else {
            sql.SELECT("order_id");
        }
        sql.SELECT("order_no");
        sql.SELECT("shop_id");
        sql.SELECT("order_status");
        sql.SELECT("product_count");
        sql.SELECT("product_amount_total");
        sql.SELECT("order_amount_total");
        sql.SELECT("logistics_fee");
        sql.SELECT("order_coupon_total");
        sql.SELECT("is_unpacking_inspection");
        sql.SELECT("isinvoiceFlag");
        sql.SELECT("invoice_id");
        sql.SELECT("address_id");
        sql.SELECT("orderlogistics_id");
        sql.SELECT("pay_channel");
        sql.SELECT("out_trade_no");
        sql.SELECT("escrow_trade_no");
        sql.SELECT("orderTime");
        sql.SELECT("payTime");
        sql.SELECT("logisticsTime");
        sql.SELECT("user_id");
        sql.SELECT("user_remark");
        sql.SELECT("order_settlement_status");
        sql.SELECT("order_settlement_time");
        sql.SELECT("createTime");
        sql.FROM("order");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Order record = (Order) parameter.get("record");
        OrderExample example = (OrderExample) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("order");
        
        if (record.getOrder_id() != null) {
            sql.SET("order_id = #{record.order_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_no() != null) {
            sql.SET("order_no = #{record.order_no,jdbcType=VARCHAR}");
        }
        
        if (record.getShop_id() != null) {
            sql.SET("shop_id = #{record.shop_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_status() != null) {
            sql.SET("order_status = #{record.order_status,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_count() != null) {
            sql.SET("product_count = #{record.product_count,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_amount_total() != null) {
            sql.SET("product_amount_total = #{record.product_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_amount_total() != null) {
            sql.SET("order_amount_total = #{record.order_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getLogistics_fee() != null) {
            sql.SET("logistics_fee = #{record.logistics_fee,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_coupon_total() != null) {
            sql.SET("order_coupon_total = #{record.order_coupon_total,jdbcType=DECIMAL}");
        }
        
        if (record.getIs_unpacking_inspection() != null) {
            sql.SET("is_unpacking_inspection = #{record.is_unpacking_inspection,jdbcType=INTEGER}");
        }
        
        if (record.getIsinvoiceFlag() != null) {
            sql.SET("isinvoiceFlag = #{record.isinvoiceFlag,jdbcType=INTEGER}");
        }
        
        if (record.getInvoice_id() != null) {
            sql.SET("invoice_id = #{record.invoice_id,jdbcType=INTEGER}");
        }
        
        if (record.getAddress_id() != null) {
            sql.SET("address_id = #{record.address_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrderlogistics_id() != null) {
            sql.SET("orderlogistics_id = #{record.orderlogistics_id,jdbcType=INTEGER}");
        }
        
        if (record.getPay_channel() != null) {
            sql.SET("pay_channel = #{record.pay_channel,jdbcType=VARCHAR}");
        }
        
        if (record.getOut_trade_no() != null) {
            sql.SET("out_trade_no = #{record.out_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getEscrow_trade_no() != null) {
            sql.SET("escrow_trade_no = #{record.escrow_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderTime() != null) {
            sql.SET("orderTime = #{record.orderTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPayTime() != null) {
            sql.SET("payTime = #{record.payTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLogisticsTime() != null) {
            sql.SET("logisticsTime = #{record.logisticsTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUser_id() != null) {
            sql.SET("user_id = #{record.user_id,jdbcType=INTEGER}");
        }
        
        if (record.getUser_remark() != null) {
            sql.SET("user_remark = #{record.user_remark,jdbcType=VARCHAR}");
        }
        
        if (record.getOrder_settlement_status() != null) {
            sql.SET("order_settlement_status = #{record.order_settlement_status,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_settlement_time() != null) {
            sql.SET("order_settlement_time = #{record.order_settlement_time,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("createTime = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("order");
        
        sql.SET("order_id = #{record.order_id,jdbcType=INTEGER}");
        sql.SET("order_no = #{record.order_no,jdbcType=VARCHAR}");
        sql.SET("shop_id = #{record.shop_id,jdbcType=INTEGER}");
        sql.SET("order_status = #{record.order_status,jdbcType=INTEGER}");
        sql.SET("product_count = #{record.product_count,jdbcType=INTEGER}");
        sql.SET("product_amount_total = #{record.product_amount_total,jdbcType=DECIMAL}");
        sql.SET("order_amount_total = #{record.order_amount_total,jdbcType=DECIMAL}");
        sql.SET("logistics_fee = #{record.logistics_fee,jdbcType=DECIMAL}");
        sql.SET("order_coupon_total = #{record.order_coupon_total,jdbcType=DECIMAL}");
        sql.SET("is_unpacking_inspection = #{record.is_unpacking_inspection,jdbcType=INTEGER}");
        sql.SET("isinvoiceFlag = #{record.isinvoiceFlag,jdbcType=INTEGER}");
        sql.SET("invoice_id = #{record.invoice_id,jdbcType=INTEGER}");
        sql.SET("address_id = #{record.address_id,jdbcType=INTEGER}");
        sql.SET("orderlogistics_id = #{record.orderlogistics_id,jdbcType=INTEGER}");
        sql.SET("pay_channel = #{record.pay_channel,jdbcType=VARCHAR}");
        sql.SET("out_trade_no = #{record.out_trade_no,jdbcType=VARCHAR}");
        sql.SET("escrow_trade_no = #{record.escrow_trade_no,jdbcType=VARCHAR}");
        sql.SET("orderTime = #{record.orderTime,jdbcType=TIMESTAMP}");
        sql.SET("payTime = #{record.payTime,jdbcType=TIMESTAMP}");
        sql.SET("logisticsTime = #{record.logisticsTime,jdbcType=TIMESTAMP}");
        sql.SET("user_id = #{record.user_id,jdbcType=INTEGER}");
        sql.SET("user_remark = #{record.user_remark,jdbcType=VARCHAR}");
        sql.SET("order_settlement_status = #{record.order_settlement_status,jdbcType=INTEGER}");
        sql.SET("order_settlement_time = #{record.order_settlement_time,jdbcType=TIMESTAMP}");
        sql.SET("createTime = #{record.createTime,jdbcType=TIMESTAMP}");
        
        OrderExample example = (OrderExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    public String updateByPrimaryKeySelective(Order record) {
        SQL sql = new SQL();
        sql.UPDATE("order");
        
        if (record.getOrder_no() != null) {
            sql.SET("order_no = #{order_no,jdbcType=VARCHAR}");
        }
        
        if (record.getShop_id() != null) {
            sql.SET("shop_id = #{shop_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_status() != null) {
            sql.SET("order_status = #{order_status,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_count() != null) {
            sql.SET("product_count = #{product_count,jdbcType=INTEGER}");
        }
        
        if (record.getProduct_amount_total() != null) {
            sql.SET("product_amount_total = #{product_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_amount_total() != null) {
            sql.SET("order_amount_total = #{order_amount_total,jdbcType=DECIMAL}");
        }
        
        if (record.getLogistics_fee() != null) {
            sql.SET("logistics_fee = #{logistics_fee,jdbcType=DECIMAL}");
        }
        
        if (record.getOrder_coupon_total() != null) {
            sql.SET("order_coupon_total = #{order_coupon_total,jdbcType=DECIMAL}");
        }
        
        if (record.getIs_unpacking_inspection() != null) {
            sql.SET("is_unpacking_inspection = #{is_unpacking_inspection,jdbcType=INTEGER}");
        }
        
        if (record.getIsinvoiceFlag() != null) {
            sql.SET("isinvoiceFlag = #{isinvoiceFlag,jdbcType=INTEGER}");
        }
        
        if (record.getInvoice_id() != null) {
            sql.SET("invoice_id = #{invoice_id,jdbcType=INTEGER}");
        }
        
        if (record.getAddress_id() != null) {
            sql.SET("address_id = #{address_id,jdbcType=INTEGER}");
        }
        
        if (record.getOrderlogistics_id() != null) {
            sql.SET("orderlogistics_id = #{orderlogistics_id,jdbcType=INTEGER}");
        }
        
        if (record.getPay_channel() != null) {
            sql.SET("pay_channel = #{pay_channel,jdbcType=VARCHAR}");
        }
        
        if (record.getOut_trade_no() != null) {
            sql.SET("out_trade_no = #{out_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getEscrow_trade_no() != null) {
            sql.SET("escrow_trade_no = #{escrow_trade_no,jdbcType=VARCHAR}");
        }
        
        if (record.getOrderTime() != null) {
            sql.SET("orderTime = #{orderTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getPayTime() != null) {
            sql.SET("payTime = #{payTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getLogisticsTime() != null) {
            sql.SET("logisticsTime = #{logisticsTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUser_id() != null) {
            sql.SET("user_id = #{user_id,jdbcType=INTEGER}");
        }
        
        if (record.getUser_remark() != null) {
            sql.SET("user_remark = #{user_remark,jdbcType=VARCHAR}");
        }
        
        if (record.getOrder_settlement_status() != null) {
            sql.SET("order_settlement_status = #{order_settlement_status,jdbcType=INTEGER}");
        }
        
        if (record.getOrder_settlement_time() != null) {
            sql.SET("order_settlement_time = #{order_settlement_time,jdbcType=TIMESTAMP}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("createTime = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        sql.WHERE("order_id = #{order_id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table order
     *
     * @mbggenerated Thu Oct 05 16:27:57 CST 2017
     */
    protected void applyWhere(SQL sql, OrderExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}